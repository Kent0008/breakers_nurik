#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É drill-edge –∏ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import json
import time
import requests
import paho.mqtt.publish as publish
import paho.mqtt.subscribe as subscribe
from datetime import datetime, timezone

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MQTT_BROKER = "localhost"
MQTT_PORT = 1883
API_BASE = "http://localhost:8000/api"

def check_mqtt_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT...")
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–ø–∏–∫
        subscribe.simple("test/connection", hostname=MQTT_BROKER, port=MQTT_PORT, timeout=5)
        print("‚úÖ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: {e}")
        return False

def check_api_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
    try:
        response = requests.get(f"{API_BASE}/thresholds/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_drill_edge_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ drill-edge"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ drill-edge...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ drill-edge
    drill_data = {
        "value": 25.5,
        "unit": "bar",
        "timestamp": datetime.now(timezone.utc).isoformat()
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ drill-edge —Ñ–æ—Ä–º–∞—Ç
        publish.single(
            "drill/equipment1/sensor/pressure",
            json.dumps(drill_data),
            hostname=MQTT_BROKER,
            port=MQTT_PORT
        )
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ drill-edge —Ñ–æ—Ä–º–∞—Ç")
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        response = requests.get(f"{API_BASE}/data/tags/")
        if response.status_code == 200:
            tags = response.json().get('tags', [])
            if 'equipment1_pressure' in tags:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã drill-edge –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±–ª–∞–∫–æ")
                return True
            else:
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è drill-edge: {e}")
        return False

def test_direct_telemetry():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏...")
    
    telemetry_data = {
        "value": 35.2,
        "timestamp": datetime.now(timezone.utc).isoformat()
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±–ª–∞—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        publish.single(
            "telemetry/test_sensor",
            json.dumps(telemetry_data),
            hostname=MQTT_BROKER,
            port=MQTT_PORT
        )
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±–ª–∞—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        response = requests.get(f"{API_BASE}/data/?tag=test_sensor&range=1h")
        if response.status_code == 200:
            data = response.json().get('results', [])
            if data:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: {e}")
        return False

def check_node_red_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Node-RED"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Node-RED...")
    try:
        response = requests.get("http://localhost:1880", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Node-RED –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Node-RED –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Node-RED: {e}")
        return False

def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã DRILL Monitoring")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", check_mqtt_connection),
        ("API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", check_api_connection),
        ("Node-RED —Å—Ç–∞—Ç—É—Å", check_node_red_status),
        ("Drill-edge –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_drill_edge_integration),
        ("–ü—Ä—è–º–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è", test_direct_telemetry),
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{name:25} {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("   - Frontend: http://localhost:3000")
        print("   - Node-RED: http://localhost:1880")
        print("   - API: http://localhost:8000/api/")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤.")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã: docker-compose ps")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs")
        print("   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose restart")

if __name__ == "__main__":
    main() 